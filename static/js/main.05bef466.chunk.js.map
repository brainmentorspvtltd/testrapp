{"version":3,"sources":["logo.svg","utils/axioscall.js","container/Shop.js","error/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","defaults","baseURL","headers","get","myInterceptor","interceptors","request","use","console","log","localStorage","tokenNumber","tokenId","makeAxiosCall","url","timeout","maxContentLength","response","data","id","setTimeout","eject","Shop","props","msg","state","items","json","object","JSON","parse","e","arr","this","setState","promise","promise2","promise3","all","then","catch","err","Error","React","Component","ErrorBoundary","isError","errorMessage","error","info","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mLCE3CC,IAAMC,SAASC,QAAQ,2EACvBF,IAAMC,SAASE,QAAQC,IAAI,gBAAgB,mBAC3C,IAAMC,EAAgBL,IAAMM,aAAaC,QAAQC,KAAI,SAAAD,GAKjD,OAJAE,QAAQC,IAAI,+BAA+BC,aAAaC,aAGxDL,EAAQM,QAAUF,aAAaC,YACxBL,KAWJ,SAASO,EAAcC,GAc9B,OAHIN,QAAQC,IAAI,8CAA8CV,KAEhDA,IAAMI,IAAIW,EAZJ,CAGZC,QAAQ,IACRC,iBAAiB,MAbzBjB,IAAMM,aAAaY,SAASV,KAAI,SAAAU,GAG5B,OAFAT,QAAQC,IAAI,gCAAgCQ,GAC5CA,EAASC,KAAT,QAAyB,GAAGC,GAAK,OAC1BF,KAEXG,YAAW,WACXrB,IAAMM,aAAaC,QAAQe,MAAMjB,KAC/B,KCZK,IAAMkB,EAAb,YACI,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,KAAM,EACX,EAAKC,MAAQ,CAACC,MAAM,GAAIF,IAAI,EAAKA,KAHnB,EADtB,wEAMeG,GACPnB,QAAQC,IAAI,qCAAqCkB,GACjD,IACA,IAAIC,EAASC,KAAKC,MAAMH,GAExB,MAAMI,GACFvB,QAAQC,IAAI,mBAAmBsB,GAEnCvB,QAAQC,IAAI,aAAamB,EAAQ,WAAWA,GAC5C,IAAII,EAAMJ,EAAM,QAChBK,KAAKC,SAAL,eAAkBD,KAAKR,MAAvB,CAA6BC,MAAMM,OAhB3C,2CAkByB,IAAD,OAChBxB,QAAQC,IAAI,8CAEZ,IAAMK,EAAM,gBAGRqB,EAAUtB,EAAcC,GACxBsB,EAAWvB,EAAcC,GACzBuB,EAAWxB,EAAcC,GAC7Bf,IAAMuC,IAAI,CAACH,EAAQC,EAASC,IAAWE,MAAK,SAAAP,GACxCxB,QAAQC,IAAI,yBAAyBuB,MAEzCxB,QAAQC,IAAI,aAAa0B,GACzBA,EAAQI,MAAK,SAAAtB,GACTT,QAAQC,IAAI,mBAAmBQ,EAASC,KAAT,SAC/B,IAAIc,EAAMf,EAASC,KAAT,QAEb,EAAKgB,SAAL,eAAkB,EAAKT,MAAvB,CAA6BC,MAAMM,QACjCQ,OAAM,SAAAC,GACLjC,QAAQC,IAAI,YAAYgC,QArCpC,sCAqDQR,KAAKT,KAAOS,KAAKT,IACjBS,KAAKC,SAAL,eAAkBD,KAAKR,MAAvB,CAA6BD,IAAIS,KAAKT,SAtD9C,+BA2DY,MAAM,IAAIkB,MAAM,kBA3D5B,GAA0BC,IAAMC,WCNnBC,EAAb,YACI,WAAYtB,GAAO,IAAD,8BACd,4CAAMA,KACDE,MAAQ,CAACqB,SAAQ,EAAOC,aAAa,IAF5B,EADtB,+EASsBC,EAAOC,GACrBhB,KAAKC,SAAS,CAACY,SAAQ,EAAKC,aAAaC,MAVjD,+BAaQ,OAAGf,KAAKR,MAAMqB,QAEV,6BACI,yDAA+Bb,KAAKR,MAAMsB,eAKvCd,KAAKV,MAAM2B,YArB9B,gDAKoCF,GAE5B,MAAO,CAAEF,SAAS,OAP1B,GAAmCF,aCYpBO,MARf,WACE,OACE,kBAAC,EAAD,KACA,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdzB,OAAM,SAAAQ,GACLxC,QAAQwC,MAAMA,EAAMkB,c","file":"static/js/main.05bef466.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n//axios.defaults.baseURL = 'http://localhost:1234';\naxios.defaults.baseURL='https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master';\naxios.defaults.headers.get['Content-Type']='application/json';\nconst myInterceptor = axios.interceptors.request.use(request=>{\n    console.log('Request Interceptor Invoked ',localStorage.tokenNumber);\n    //request.tokenId = 'A123456';\n\n    request.tokenId = localStorage.tokenNumber;\n    return request;\n});\n\naxios.interceptors.response.use(response=>{\n    console.log('Response Interceptor Invoked ',response);\n    response.data['mobiles'][0].id = 999999;\n    return response;\n});\nsetTimeout(()=>{\naxios.interceptors.request.eject(myInterceptor);\n},9000);\nexport function makeAxiosCall(url){\n    const options = {\n        //method:'GET',\n        //url:url,\n        timeout:3000,\n        maxContentLength:4000\n        // data:{\n        //     firstName:'Brain',\n        //     lastName:'Mentors'\n        // }\n    };\n    console.log('*********************Axios is  Type ',typeof axios);\n//var promise = axios(options);\nvar promise = axios.get(url,options);  // axios.post()\nreturn promise;\n}\n","import React from 'react';\nimport {itemOperations} from '../models/itemoperations';\nimport {List} from '../components/List';\nimport {Search} from '../components/Search';\nimport {doAjax,fetchDemo} from '../utils/ajax';\nimport {makeAxiosCall} from '../utils/axioscall';\nimport axios from 'axios';\nexport class Shop extends React.Component{\n    constructor(props){\n        super(props);\n        this.msg = false;\n        this.state = {items:[], msg:this.msg};\n    }\n    jsonResult(json){\n        console.log('JSON Rec in Shop Component ',typeof json);\n        try{\n        var object = JSON.parse(json);\n        }\n        catch(e){\n            console.log('JSON Cant parse ',e);\n        }\n        console.log(\"Object is \",object, \" \",typeof object);\n        var arr = object['mobiles'];\n        this.setState({...this.state,items:arr});\n    }\n    componentWillMount(){\n        console.log('Component Will Mount Call and DO Ajax Call');\n        //const url = \"https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master/mobiles.json\";\n        const url = \"/mobiles.json\";\n        //doAjax(url, this.jsonResult.bind(this)); // callback fn attach\n        //var promise = fetchDemo(url);\n        var promise = makeAxiosCall(url);\n        var promise2 = makeAxiosCall(url);\n        var promise3 = makeAxiosCall(url);\n        axios.all([promise,promise2,promise3]).then(arr=>{\n            console.log('All Promise Result is ',arr);\n        })\n        console.log(\"After End \",promise);\n        promise.then(response=>{\n            console.log('Axios Result is ',response.data['mobiles']);\n            var arr = response.data['mobiles'];\n            //delete localStorage.tokenId;\n         this.setState({...this.state,items:arr});\n        }).catch(err=>{\n            console.log('Error is ',err);\n        })\n    // promise.then(response=>{ // Success\n    // console.log(\"Response is \",response);\n    // response.json().then(data=>{\n    //     console.log(\"Data is \",data);\n    //     var arr = data['mobiles'];\n    //     this.setState({...this.state,items:arr});\n    // }).catch(e=>console.log(\"JSON Parse Error \",e));\n    // }).catch(err=>{  // fail\n    // console.log(\"Error in Response \",err);\n    // });\n        //let itemArray = itemOperations.fill();\n        //this.setState({...this.state,items:itemArray});\n    }\n    toggleMessage(){\n        this.msg = !this.msg;\n        this.setState({...this.state,msg:this.msg});\n    }\n    render(){\n        var a= 100;\n        if(a==100){\n            throw new Error('Shop Error');\n        }\n        return (\n            <div>\n                {this.state.msg?<p>Shopping</p>:<h1>Shop Here</h1>}\n                <button onClick={()=>{\n                    this.toggleMessage();\n                }}>Toggle</button>\n                <Search/>\n                <List items = {this.state.items}/>\n\n            </div>\n        )\n    }\n}","import React, {Component} from 'react';\nexport class ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {isError:false, errorMessage:''};\n    }\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { isError: true };\n      }\n    componentDidCatch(error, info){\n        this.setState({isError:true,errorMessage:error});\n    }\n    render(){\n        if(this.state.isError){\n        return (\n            <div>\n                <h1>OOPS Something Went Wrong {this.state.errorMessage}</h1>\n            </div>    \n        );\n        }\n        else{\n            return this.props.children;\n        }\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Shop } from './container/Shop';\nimport {ErrorBoundary} from './error/ErrorBoundary';\nfunction App() {\n  return (\n    <ErrorBoundary>\n    <Shop/>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}